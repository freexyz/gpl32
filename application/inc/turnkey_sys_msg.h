/*Pseudo Header*/
#define STATE_BASE              0x00000100
#define STATE_NORMAL_BASE       STATE_BASE
#define STATE_SUB_BASE          0x00000A00
#define EVENT_KEY_BASE    		0x00001000
#define EVENT_RTC_BASE          0x00004000
#define EVENT_EXT_BASE          0x00005000
#define EVENT_PWR_BASE          0x00006000
#define EVENT_SLIDE_SHOW_BASE   0x00007000
#define EVENT_APQ_BASE          0x00008000
#define EVENT_USBD_BASE     	0x00009000
#define EVENT_CALENDAR_BASE   	0x0000A000

#define STATE_ENUM_SET      1

#if STATE_ENUM_SET == 0
typedef enum
{
    STATE_STARTUP=STATE_BASE,
    STATE_ICON_SHOW,
    STATE_SLIDE_SHOW,
    STATE_PHOTO_VIEW,
    STATE_MOVIE,
    STATE_MENU,
    STATE_CALENDAR,
    STATE_SETUP,
    STATE_MUSIC,
    STATE_MEDIA,
    STATE_PETS,
    STATE_PARROT,
    STATE_SLIDESHOW_SET_INTERVAL,
    STATE_CALENDAR_SET_INTERVAL,
    STATE_EXCEPTION_HANDLE,
    STATE_STORAGE,
    STATE_USB_DEVICE_PC_IN,
    STATE_ITEM_SELECTION,
    STATE_MIRROR,
	STATE_VOLUME_CONTROL,
	STATE_BRIGHTNESS_CONTROL,
	STATE_POWERTIME_SET,
    STATE_DATESET_SET,
    STATE_ALARMSET_SET,
    STATE_INTERNATIONAL,
    STATE_POP_MESSAGE,
    STATE_ALARM_HAPPEN,
    STATE_INTERROGATION,
    STATE_VIDEO_PREVIEW,
    STATE_SAVE_AS_LOGO,
    STATE_MASS_PRO_TEST,
    STATE_MAX,
    STATE_DUMMY=STATE_MAX
} STATE_ENUM;
#elif STATE_ENUM_SET == 1
typedef enum
{
/*=============MAIN STATE ENUM START==================*/
    STATE_STARTUP=STATE_NORMAL_BASE,  /*0x00000100*/
    STATE_ICON_SHOW,				  /*0x00000101*/
    STATE_SLIDE_SHOW,                 /*0x00000102*/
    STATE_PHOTO_VIEW,                 /*0x00000103*/
    STATE_MOVIE,                      /*0x00000104*/
    STATE_MENU,                       /*0x00000105*/
    STATE_CALENDAR,                   /*0x00000106*/
    STATE_SETUP,                      /*0x00000107*/
    STATE_MUSIC,                      /*0x00000108*/
    STATE_MEDIA,                      /*0x00000109*/
    STATE_PETS,                       /*0x0000010A*/
    STATE_MIRROR,                     /*0x0000010B*/
    STATE_VIDEO_PREVIEW,              /*0x0000010C*/
    STATE_EXCEPTION_HANDLE,           /*0x0000010D*/
    STATE_FM,				          /*0x0000010E*/
    STATE_MUSIC_LIST,			      /*0x0000010F*/
    STATE_PARROT,                     /*0x00000110*/
/*=============SUB STATE ENUM START===================*/
    STATE_SUB_START=STATE_SUB_BASE,   /*0x00000A00*/
    STATE_SLIDESHOW_SET_INTERVAL,     /*0x00000A01*/
    STATE_CALENDAR_SET_INTERVAL,      /*0x00000A02*/
    STATE_STORAGE_BOARD,              /*0x00000A03*/
    STATE_STORAGE,                    /*0x00000A04*/
    STATE_USB_DEVICE_PC_IN,           /*0x00000A05*/
    STATE_ITEM_SELECTION,             /*0x00000A06*/
    STATE_VOLUME_CONTROL,             /*0x00000A07*/
    STATE_BRIGHTNESS_CONTROL,         /*0x00000A08*/
    STATE_POWERTIME_SET,               /*0x00000A09*/
    STATE_DATESET_SET,                /*0x00000A0A*/
    STATE_ALARMSET_SET,               /*0x00000A0B*/
    STATE_INTERNATIONAL,              /*0x00000A0C*/
    STATE_POP_MESSAGE,                /*0x00000A0D*/
    STATE_ALARM_HAPPEN,               /*0x00000A0E*/
    STATE_INTERROGATION,              /*0x00000A0F*/
    STATE_SAVE_AS_LOGO,		 /*0x00000A10*/
    STATE_MASS_PRO_TEST,		  /*0x00000A11*/
    STATE_MAX=0x0000FFF,              /*0x00000FFF*/
    STATE_DUMMY=STATE_MAX             /*0x00000FFF*/
} STATE_ENUM;

#endif



typedef enum {
	// Hot keys
    EVENT_KEY_POWER=EVENT_KEY_BASE,
    EVENT_KEY_MENU        ,
    EVENT_KEY_SLIDE_SHOW  ,
    EVENT_KEY_ICON_SHOW   ,
    EVENT_KEY_PHOTO_VIEW,
    EVENT_KEY_CALENDAR    ,
    EVENT_KEY_SETUP       ,
    EVENT_KEY_MUSIC       ,
    EVENT_KEY_PETS        ,
    EVENT_KEY_GAMES       ,
    EVENT_KEY_STORAGE	  ,
	// Direction keys
    EVENT_KEY_OK,
	EVENT_KEY_IR_OK		,
    EVENT_KEY_BACK      ,
    EVENT_KEY_LEFT      ,
    EVENT_KEY_IR_LEFT	,
    EVENT_KEY_RIGHT     ,
	EVENT_KEY_IR_RIGHT	,
    EVENT_KEY_UP        ,
    EVENT_KEY_DOWN      ,
    EVENT_KEY_PAGEUP    ,
    EVENT_KEY_PAGEDOWN  ,
    EVENT_KEY_ZOOM_IN   ,
    EVENT_KEY_ZOOM_OUT  ,
    EVENT_KEY_ZOOM_CYCLE,
    EVENT_KEY_ROTATE	,
    EVENT_KEY_MODE		,
    EVENT_KEY_INTERVAL	,
    // Media keys
    EVENT_KEY_MEDIA_SOUND_ON_OFF,
    EVENT_KEY_MEDIA_VOL_UP   	,
    EVENT_KEY_MEDIA_VOL_DOWN 	,
    EVENT_KEY_MEDIA_STOP     	,
    EVENT_KEY_MEDIA_PLAY     	,
    EVENT_KEY_MEDIA_PAUSE    	,
    EVENT_KEY_MEDIA_PLAY_PAUSE	,
    EVENT_KEY_MEDIA_PREV     	,
    EVENT_KEY_MEDIA_NEXT     	,
    EVENT_KEY_MEDIA_FF       	,
    EVENT_KEY_MEDIA_BF       	,
    // Auto demo
    EVENT_KEY_AUTO_DEMO_START,
    EVENT_KEY_AUTO_DEMO_PAUSE,
    EVENT_KEY_AUTO_DEMO_RESUME,
    // AP should not response to this event
    EVENT_KEY_NO_ACTION,
    // PHOTO Frame display mode
	EVENT_PORTRAIT_DISPLAY,
    EVENT_LANDSCAPE_DISPLAY,
    // Pop-up style OSD menu
    EVENT_KEY_OSD_MENU,
    // Video preview key event
    EVENT_KEY_VIDEO_PREVIEW,
    EVENT_KEY_FULL_IMAGE,
    EVENT_KEY_AUDIO_INDEPENDENT,
    EVENT_KEY_RESERVED1,
    EVENT_KEY_RESERVED2,
    EVENT_KEY_SELECT_OUTPUT_DEVICE,
    EVENT_KEY_MUSIC_PLAY_PAUSE,
	EVENT_KEY_REPEAT,
	EVENT_KEY_RADIO,
	EVENT_KEY_0,
	EVENT_KEY_1,
	EVENT_KEY_2,
	EVENT_KEY_3,
	EVENT_KEY_4,
	EVENT_KEY_5,
	EVENT_KEY_6,
	EVENT_KEY_7,
	EVENT_KEY_8,
	EVENT_KEY_9,
	EVENT_KEY_EQ,
	EVENT_KEY_VOLUME_CONTROL,
	EVENT_KEY_IR_UP,
	EVENT_KEY_IR_DOWN,
	EVENT_KEY_SAVE_AS_LOGO,
	EVENT_KEY_PRINT_SCREEN,
	// NAND flash backup management
	EVENT_KEY_SELECT_PHOTO,
    EVENT_KEY_UNSELECT_PHOTO,
	EVENT_KEY_INVERT_SELECT_PHOTO,
    EVENT_KEY_SELECT_PAGE,
    EVENT_KEY_UNSELECT_PAGE,
    EVENT_KEY_INVERT_SELECT_PAGE,
    EVENT_KEY_SELECT_CARD,
    EVENT_KEY_UNSELECT_CARD,
    EVENT_KEY_INVERT_SELECT_CARD,
	EVENT_KEY_COPY,
	EVENT_KEY_DELETE,
	EVENT_KEY_COPY_DELETE,
    // End of key define
    EVENT_KEY_MAX
} EVENT_MEDIA_ENUM;

typedef enum {
    EVENT_RTC_AUTOPWR_ON=EVENT_RTC_BASE,
    EVENT_RTC_AUTOPWR_OFF,
    EVENT_RTC_SEC,
    EVENT_RTC_MIN,
    EVENT_RTC_HOUR,
    EVENT_RTC_DAY,
    EVENT_RTC_ALARM_POP  ,
    EVENT_RTC_MAX
} EVENT_RTC_ENUM;

typedef enum {
    EVENT_STORAGE_LOADING_START=EVENT_EXT_BASE,
    EVENT_STORAGE_LOADING_END,
    EVENT_STORAGE_MSG_POP,
    EVENT_STORAGE_CHANGE,
    EVENT_STORAGE_MOUNT_FAIL,
    EVENT_STG_NAUGHTY   ,
    EVENT_USB_PC_IN     ,
    EVENT_USB_PC_OUT    ,
    EVENT_INTERROGATION ,
    EVENT_EXT_MAX
} EVENT_EXT_ENUM;

typedef enum {
    EVENT_KEY_SLIDESHOW_TIMEDISPLAY=EVENT_SLIDE_SHOW_BASE,
    EVENT_KEY_SLIDESHOW_MUSIC,
    EVENT_KEY_SLIDESHOW_SET_TRANSITION,
    EVENT_KEY_SLIDESHOW_INTERVAL,
    EVENT_KEY_SLIDESHOW_SELECT_MUSIC,
    EVENT_KEY_SLIDESHOW_PLAY_PAUSE,
    EVENT_KEY_SLIDESHOW_DATE_ONOFF,
    EVENT_SLIDE_SHOW_MAX
} EVENT_SLIDE_SHOW_ENUM;

typedef enum {
    EVENT_KEY_CALENDAR_INTERVAL=EVENT_CALENDAR_BASE,
    EVENT_KEY_CALENDAR_SELECT_MUSIC,
    EVENT_KEY_CALENDAR_SET_TRANSITION,
    EVENT_CALENDAR_MAX
} EVENT_CALENDAR_ENUM;

typedef enum {
    EVENT_PWR_LVD=EVENT_PWR_BASE,
    EVENT_PWR_ADAPTOR_IN,
    EVENT_PWR_ADAPTOR_OUT,
    EVENT_PWR_BATTERY_CHECK,
    EVENT_PWR_LOW_VOLTAGE_DETECT,
    EVENT_PWR_MAX
} EVENT_PWR_ENUM;

typedef enum {
    EVENT_APQ_ERR_MSG=EVENT_APQ_BASE,
    EVENT_APQ_HANDLE_MSG,
	EVENT_APQ_PPU_DONE,
    EVENT_APQ_MSG_MAX
} EVENT_APQ_MSG_ENUM;

typedef enum {
    EVENT_USBD_ISR_MSG = EVENT_USBD_BASE,
    EVENT_USBD_PLUG_MSG,
    EVENT_USBD_MSG_MAX
} EVENT_USBD_MSG_ENUM;
